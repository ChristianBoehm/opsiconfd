image: docker.uib.gmbh/opsi/dev/pybuilder:deb9-py3.11

variables:
  CI_DEBUG_SERVICES: "false"

stages:
  - test
  - build
  - publish

.install_tools: &install_tools |
  export DEBIAN_FRONTEND=noninteractive
  apt update
  apt -y install debhelper osc tar wget
  if [ "$(dpkg --print-architecture)" = "amd64" ]; then
    wget "$OPSIDEVTOOLS_URL_LINUX_X64" -O opsi-dev-tools.tar.gz
  else
    wget "$OPSIDEVTOOLS_URL_LINUX_ARM64" -O opsi-dev-tools.tar.gz
  fi
  tar -xvf opsi-dev-tools.tar.gz
  ./opsi-dev-tool --self-install

.prepare_tests: &prepare_tests |
  # Install debian packages
  export DEBIAN_FRONTEND=noninteractive

  wget -q https://apt.grafana.com/gpg.key -O /usr/share/keyrings/grafana.key
  echo "deb [signed-by=/usr/share/keyrings/grafana.key] https://apt.grafana.com stable main" > /etc/apt/sources.list.d/grafana.list

  apt update
  apt -y install mariadb-client bc grafana

  # Grant full database access to opsi user
  mysql --host=mysql --user=root --password=${MYSQL_ROOT_PASSWORD} -e "GRANT ALL ON *.* TO 'opsi'@'%';"

  # Start grafana (will report failure but works)
  /etc/init.d/grafana-server start || true

  [ -e /etc/opsi ] && rm -r /etc/opsi
  cp -a opsiconfd_data/etc /etc/opsi

  # Configure opsiconfd
  echo "redis-internal-url = redis://redis" >> tests/data/default-opsiconfd.conf
  echo "log-level-stderr = 0" >> tests/data/default-opsiconfd.conf
  echo "log-level-file = 6" >> tests/data/default-opsiconfd.conf
  echo "log-file = /tmp/opsiconfd.log" >> tests/data/default-opsiconfd.conf
  cat tests/data/default-opsiconfd.conf

  sed -i s'/.*address.*/    "address": "mysql",/' tests/data/opsi-config/backends/mysql.conf

  # Installing opsi test modules file
  [ -z "${OPSILICSRV_TOKEN}" ] && (echo "OPSILICSRV_TOKEN not set" 1>&2 ; exit 1)
  mkdir -p /etc/opsi/licenses
  wget --header="Authorization: Bearer ${OPSILICSRV_TOKEN}" "https://opsi-license-server.uib.gmbh/api/v1/licenses/test?usage=opsiconfd-gitlab-ci" -O /etc/opsi/licenses/test.opsilic

  # Create dirs
  mkdir -p /var/lib/opsi/repository
  mkdir -p /var/lib/opsi/depot
  mkdir -p /var/lib/opsi/workbench
  mkdir -p /var/log/opsi/clientconnect
  mkdir -p /var/lib/opsi/public
  mkdir -p /tftpboot

  # Install poetry
  pip3 install poetry
  poetry lock --no-update
  poetry install

  # Create adminuser used in tests
  useradd adminuser
  echo "adminuser:adminuser" | chpasswd
  adduser adminuser opsiadmin
  adduser adminuser opsifileadmins


.perftest: &perftest |
  [ -e /tmp/opsiconfd.log ] && rm /tmp/opsiconfd.log
  poetry run opsiconfd -c tests/data/default-opsiconfd.conf -l6 setup
  poetry run opsiconfd -c tests/data/default-opsiconfd.conf --workers=1 --log-level-file=5 --log-file=/tmp/opsiconfd.log --max-session-per-ip=20000 &
  sleep 10
  cat /tmp/opsiconfd.log

  date
  echo "---------------------------------------"
  echo "Run opsiconfd-perftest"
  echo "---------------------------------------"
  poetry run ./perftest/opsiconfd-perftest.py -l perftest/tests/test_session_loading.json -w /tmp/perftest-result
  cat /tmp/perftest-result
  [ $(grep errors= /tmp/perftest-result | cut -d '=' -f2) -gt 0 ] && ( cat /tmp/perftest-result; echo 'Errors in perftest' >&2; exit 1 )
  # Average request time has to be faster than 10 ms
  echo "$(grep avg_seconds_per_request= /tmp/perftest-result | cut -d '=' -f2)<0.01" | bc > /tmp/bc-result
  [ $(cat /tmp/bc-result) = "1" ] || ( echo 'Average seconds per request >= 10 ms' >&2; exit 1 )

  echo "---------------------------------------"
  echo "Run opsiconfd-backend-perftest"
  echo "---------------------------------------"
  poetry run ./perftest/opsiconfd-backend-perftest.py --products 100 --clients 100 --iterations 5 > /tmp/perftest-result || (
    echo "opsiconfd-backend-perftest.py failed"
    cat /tmp/opsiconfd.log
    exit 1
  )
  cat /tmp/perftest-result
  echo "$(grep real= /tmp/perftest-result | cut -d '=' -f2)<30000" | bc > /tmp/bc-result
  [ $(cat /tmp/bc-result) = "1" ] || ( echo 'Required time >= 30 s' >&2; exit 1 )

.pytest: &pytest |
  [ -e /tmp/opsiconfd.log ] && rm /tmp/opsiconfd.log
  echo "---------------------------------------"
  echo "Run tests"
  echo "---------------------------------------"
  exit_code=0
  poetry run pytest -x --tb=short -o junit_family=xunit2 --junitxml=testreport.xml --cov-append --cov opsiconfd --cov-report term --cov-report xml -v tests

.run_linters: &run_linters |
  echo "---------------------------------------"
  echo "Run linters"
  echo "---------------------------------------"
  poetry run pylint --disable=R,fixme,E0012 opsiconfd tests
  poetry run ruff opsiconfd tests
  poetry run mypy opsiconfd tests

test:perftest:
  services:
    - name: mysql:latest
      command:
        - --max_connections=1000
        - --max_allowed_packet=64M
        - --default-authentication-plugin=mysql_native_password
    - name: redislabs/redistimeseries:latest
      alias: redis
  variables:
    MYSQL_ROOT_PASSWORD: "opsi"
    MYSQL_DATABASE: "opsitest"
    MYSQL_USER: "opsi"
    MYSQL_PASSWORD: "opsi"
  stage: test
  script:
    - *prepare_tests
    - *perftest

test:pylint-pytest:
  services:
    - name: mysql:latest
      command:
        - --max_connections=1000
        - --max_allowed_packet=64M
        - --default-authentication-plugin=mysql_native_password
    - name: redislabs/redistimeseries:latest
      alias: redis
  variables:
    MYSQL_ROOT_PASSWORD: "opsi"
    MYSQL_DATABASE: "opsitest"
    MYSQL_USER: "opsi"
    MYSQL_PASSWORD: "opsi"
  stage: test
  script:
    - *prepare_tests
    - *run_linters
    - *pytest
  coverage: '/TOTAL\s+\d+\s+\d+\s+(\d+)%/'
  artifacts:
    name: 'opsiconfd_test'
    paths:
      - coverage.xml
    expire_in: 3 days
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

build:linux-pyinstaller:
  stage: build
  script:
    - TRANSIFEX_MIN_REVIEW_RATE=0.0
    - '[ "$CI_COMMIT_TAG" = "" ] || TRANSIFEX_MIN_REVIEW_RATE=1.0'
    - *install_tools
    - poetry lock --no-update
    - poetry install
    - poetry run opsi-dev-cli -l debug pyinstaller build
    - mv opsiconfd opsiconfd.src
    - mv dist/opsiconfd ./opsiconfd-amd64
    # Check if binary is working
    - ./opsiconfd-amd64/opsiconfd -c opsiconfd_data/etc/opsiconfd.conf --version
  artifacts:
    name: 'opsiconfd-linux-pyinstaller'
    paths:
      - opsiconfd-amd64
    expire_in: 2 day

build:arm64-pyinstaller:
  stage: build
  tags:
    - arm64
  script:
    - TRANSIFEX_MIN_REVIEW_RATE=0.0
    - '[ "$CI_COMMIT_TAG" = "" ] || TRANSIFEX_MIN_REVIEW_RATE=1.0'
    - *install_tools
    - poetry lock --no-update
    - poetry install
    - poetry run opsi-dev-cli -l debug pyinstaller build
    - mv opsiconfd opsiconfd.src
    - mv dist/opsiconfd ./opsiconfd-arm64
    # Check if binary is working
    - OPSI_HOSTNAME=test.uib.local ./opsiconfd-arm64/opsiconfd -c opsiconfd_data/etc/opsiconfd.conf --version
  artifacts:
    name: 'opsiconfd-arm64-pyinstaller'
    paths:
      - opsiconfd-arm64
    expire_in: 2 day


#publish:obs_int:
#  stage: publish
#  dependencies:
#    - build:linux-pyinstaller
#    - build:arm64-pyinstaller
#  script:
#    - *install_tools
#    - opsi-dev-tool -l info --obs-update-package https://obs.uib.gmbh home:uibmz:opsi:4.3:development
#  only:
#    - tags

publish:obs_ext:
  stage: publish
  dependencies:
    - build:linux-pyinstaller
    - build:arm64-pyinstaller
  script:
    - *install_tools
    - opsi-dev-tool -l info --obs-update-package https://build.opensuse.org home:uibmz:opsi:4.3:development
    - opsi-dev-cli -l 5 changelog from-git output
    - opsi-dev-cli release-service register-package-version opsiconfd SERVER_PACKAGE --changelog-file output/changelog.md
    - opsi-dev-cli release-service push-repository-state opsiconfd SERVER_PACKAGE SERVER_PACKAGE-4.3-development
  only:
    - tags
