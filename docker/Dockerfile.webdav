FROM python:3.7-buster as opsiconfd_development_build

ARG DOCKER_ENV
ARG USER

ENV DOCKER_ENV=${DOCKER_ENV} \
	# python:
	PYTHONFAULTHANDLER=1 \
	PYTHONUNBUFFERED=1 \
	PYTHONHASHSEED=random \
	# pip:
	PIP_NO_CACHE_DIR=off \
	PIP_DISABLE_PIP_VERSION_CHECK=on \
	PIP_DEFAULT_TIMEOUT=100 \
	# dockerize:
	DOCKERIZE_VERSION=v0.6.1 \
	# poetry:
	POETRY_VERSION=1.1.2\
	# redis
	OPSI_REPO=https://download.opensuse.org/repositories/home:/uibmz:/opsi:/4.2:/development/Debian_10/ \
	DEV_USER=${USER}


# System deps:
RUN apt-get update \
	&& apt-get --yes dist-upgrade \
	&& apt-get --yes install \
		cpio \
		vim \
		wget \
		gettext \
		mariadb-client \
		libmariadb-dev \
		tini \
		psmisc \
		librsync1 \
		sqlite3 \
		sudo \
		nano \
		apache2

# grafana
RUN wget -q -O - https://packages.grafana.com/gpg.key |  apt-key add - \
	&& echo "deb https://packages.grafana.com/oss/deb stable main" | tee -a /etc/apt/sources.list.d/grafana.list

RUN apt-get update \
	&& apt-get --yes install \
		apt-transport-https \
		software-properties-common \
		grafana

# mysql
RUN apt-get update \
	&& apt-get --yes install mariadb-server \
	&& mkdir -p /run/mysqld \
	&& chmod 777 /run/mysqld \
	&& (mysqld_safe --skip-grant-tables --skip-networking &) \
	&& sleep 3 \
	&& (echo "\
		SET PASSWORD FOR 'root'@'localhost' = PASSWORD('opsi'); \
		UPDATE mysql.user SET authentication_string=PASSWORD('opsi'),plugin='',password_expired='N' WHERE user = 'root'; \
		FLUSH PRIVILEGES; \
		" | mysql -u root || true) \
	&& sleep 1 \
	&& (killall mysqld_safe mysqld || true) \
	&& sleep 3 \
	&& (killall -9 mysqld_safe mysqld || true) \
	&& sleep 1 \
	&& (/usr/sbin/mysqld &) \
	&& sleep 3 \
	&& echo "CREATE DATABASE opsi" | mysql -u root --password=opsi \
	&& echo "CREATE USER 'opsi'@'localhost' IDENTIFIED BY 'opsi'" | mysql -u root --password=opsi \
	&& echo "GRANT ALL ON opsi.* TO 'opsi'@'localhost'" | mysql -u root --password=opsi \
	&& (killall mysqld || true)

# redis:
RUN  echo "deb $OPSI_REPO /" > /etc/apt/sources.list.d/opsi.list

RUN wget -nv ${OPSI_REPO}Release.key -O Release.key \
	&& apt-key add - < Release.key

RUN apt-get update \
	&& apt-get --yes install \
		redis-tools \
		redis-server \
		redis-timeseries

# opsi-utils
RUN apt-get update \
	&& apt-get --yes install \
		opsi-utils \
		opsiconfd

COPY docker/files/ /

# Setup poetry
WORKDIR /workspace

RUN useradd --create-home -s /bin/bash adminuser \
	&& echo "adminuser:adminuser" | chpasswd \
	&& adduser adminuser opsifileadmins \
	&& adduser adminuser opsiadmin \
	&& cp -r /root/.bash* /home/adminuser

RUN chmod g+rw -R .

RUN openssl req -nodes -x509 -newkey rsa:2048 -keyout ca.key -out ca.crt -subj "/C=DE/ST=RP/L=Mainz/O=uib/OU=root/CN=bonifax.uib.local/emailAddress=info@uib.de" \
	&& openssl req -nodes -newkey rsa:2048 -keyout server.key -out server.csr -subj "/C=DE/ST=RP/L=Mainz/O=uib/OU=opsiconfd/CN=bonifax.uib.local/emailAddress=info@uib.de" \
	&& openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt \
	&& cp server.key /etc/opsi/ssl/opsiconfd.pem \
	&& cat server.crt >> /etc/opsi/ssl/opsiconfd.pem \
	&& mv server.key /etc/ssl/private/ssl-cert-snakeoil.key \
	&& mv server.crt /etc/ssl/certs/ssl-cert-snakeoil.pem

RUN echo '<VirtualHost _default_:4448>\n\
  DocumentRoot /var/lib/opsi\n\
  SSLEngine on\n\
  SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem\n\
  SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key\n\
  <Location "/">\n\
    Require all granted\n\
    Dav On\n\
  </Location>\n\
</VirtualHost>\n\
' >> /etc/apache2/sites-available/webdav.conf \
	&& echo "Listen 4448" > /etc/apache2/ports.conf \
	&& a2enmod dav dav_fs ssl \
	&& a2dissite 000-default default-ssl \
	&& a2ensite webdav

RUN echo '#!/bin/sh\n\
export OPSI_HOSTNAME=dev-server.uib.local\n\
echo $OPSI_HOSTNAME >/etc/hostname\n\
chmod 777 /var/lib/opsi/repository\n\
/usr/sbin/mysqld &\n\
redis-server /etc/redis/redis.conf &\n\
apachectl -f /etc/apache2/apache2.conf\n\
sleep 5\n\
zcat /confd-dev-data.sql.gz | sed "s/dev-server.uib.local/$OPSI_HOSTNAME/g" | mariadb -h localhost -u $MYSQL_USER --password=$MYSQL_PASSWORD $MYSQL_DATABASE\n\
opsiconfd --setup\n\
opsiconfd --log-level-stderr=5 --max-session-per-ip=0 --workers=2 &\n\
sleep infinity\n\
' > /docker-entrypoint.sh \
	&& chmod +x "/docker-entrypoint.sh" \
	&& mkdir tftpboot \
	&& cat /docker-entrypoint.sh
